{"ast":null,"code":"var _jsxFileName = \"/Users/mialiu/Desktop/portfolio-spotify-style/src/Views/Passion/Passion.js\",\n    _s = $RefreshSig$();\n\n// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import { Container } from \"@material-ui/core\";\n// import { Grid } from \"@material-ui/core\";\n// import './styles.css'\n// export default function Passion() {\n//     return (\n//         <main>\n//             Passion\n//         </main>\n//     );\n// }\nimport { render } from 'react-dom';\nimport React, { useRef } from 'react';\nimport clamp from 'lodash-es/clamp';\nimport { useSprings, animated, interpolate } from 'react-spring';\nimport { useGesture } from 'react-use-gesture';\nimport styled from 'styled-components';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst images = ['./1.jpeg', './2.jpeg', './3.jpeg', './4.jpeg', './5.jpeg', './2.jpeg', './3.jpeg', './4.jpeg'];\nconst Frame = styled(animated.div)({\n  display: 'flex',\n  height: '100vh',\n  width: '100vw',\n  justifyContent: 'center',\n  alignItems: 'center',\n  position: 'absolute',\n  willChange: 'transform',\n  cursor: 'grab',\n  '&:active': {\n    cursor: 'grabbing'\n  },\n  perspectiveOrigin: '50% 50%',\n  perspective: '400px'\n});\nconst WIDTH = 200;\nconst Cover = styled(animated.div)({\n  width: WIDTH,\n  height: WIDTH,\n  borderRadius: '8px',\n  backgroundSize: 'cover',\n  backgroundRepeat: 'no-repeat',\n  backgroundPosition: 'center center',\n  willChange: 'transform',\n  boxShadow: '0 62.5px 125px -25px rgba(50, 50, 73, 0.5), 0 37.5px 75px -37.5px rgba(0, 0, 0, 0.6)',\n  position: 'absolute'\n});\n\nconst getX = index => index === 0 ? 0 : index * WIDTH / 20 + 50 * Math.sign(index);\n\nconst getScale = index => index === 0 ? 1.3 : 1 - Math.abs(index) / 25;\n\nconst getZIndex = index => -index + images.length;\n\nconst getYRotation = index => index === 0 ? 0 : -35 * Math.sign(index);\n\nfunction setter({\n  xDelta,\n  down,\n  index\n} = {}) {\n  return i => {\n    const offsetIndex = i - index.current;\n    return {\n      display: 'flex',\n      x: getX(offsetIndex) + (down ? xDelta / 10 : 0),\n      sc: getScale(Math.abs(offsetIndex)),\n      zIndex: getZIndex(Math.abs(offsetIndex)),\n      yRotation: getYRotation(offsetIndex),\n      opacity: offsetIndex === 0 ? 1 : 0.9,\n      immediate: key => key === 'zIndex',\n      config: {\n        mass: 1,\n        tension: 210,\n        friction: 20\n      }\n    };\n  };\n}\n\nexport default function Passion() {\n  _s();\n\n  const index = useRef(0);\n  const [props, set] = useSprings(images.length, setter({\n    index\n  }));\n  const bind = useGesture(({\n    down,\n    delta: [xDelta],\n    direction: [xDir],\n    distance,\n    cancel\n  }) => {\n    if (down && distance > WIDTH / 10) {\n      cancel(index.current = clamp(index.current + (xDir > 0 ? -1 : 1), 0, images.length - 1));\n    }\n\n    set(setter({\n      xDelta,\n      down,\n      index\n    }));\n  });\n  return /*#__PURE__*/_jsxDEV(Frame, { ...bind(),\n    children: props.map(({\n      x,\n      display,\n      sc,\n      zIndex,\n      yRotation,\n      opacity\n    }, i) => /*#__PURE__*/_jsxDEV(Cover, {\n      style: {\n        display,\n        transform: interpolate([x, sc, yRotation], (x, sc, yr) => `translate3d(${x}%,0,0) scale(${sc}) rotateY(${yr}deg)`),\n        backgroundImage: `url(${images[i]})`,\n        zIndex,\n        opacity\n      }\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Passion, \"5Oa9x3vMbz+LGkb0TBWoiIPLvis=\", false, function () {\n  return [useSprings, useGesture];\n});\n\n_c = Passion;\n\nvar _c;\n\n$RefreshReg$(_c, \"Passion\");","map":{"version":3,"sources":["/Users/mialiu/Desktop/portfolio-spotify-style/src/Views/Passion/Passion.js"],"names":["render","React","useRef","clamp","useSprings","animated","interpolate","useGesture","styled","images","Frame","div","display","height","width","justifyContent","alignItems","position","willChange","cursor","perspectiveOrigin","perspective","WIDTH","Cover","borderRadius","backgroundSize","backgroundRepeat","backgroundPosition","boxShadow","getX","index","Math","sign","getScale","abs","getZIndex","length","getYRotation","setter","xDelta","down","i","offsetIndex","current","x","sc","zIndex","yRotation","opacity","immediate","key","config","mass","tension","friction","Passion","props","set","bind","delta","direction","xDir","distance","cancel","map","transform","yr","backgroundImage"],"mappings":"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","sourcesContent":["\n// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import { Container } from \"@material-ui/core\";\n// import { Grid } from \"@material-ui/core\";\n// import './styles.css'\n\n\n\n// export default function Passion() {\n\n//     return (\n//         <main>\n//             Passion\n//         </main>\n//     );\n\n// }\n\nimport { render } from 'react-dom'\nimport React, { useRef } from 'react'\nimport clamp from 'lodash-es/clamp'\nimport { useSprings, animated, interpolate } from 'react-spring'\nimport { useGesture } from 'react-use-gesture'\nimport styled from 'styled-components'\nimport './styles.css'\n\n\nconst images = ['./1.jpeg', './2.jpeg', './3.jpeg', './4.jpeg', './5.jpeg', './2.jpeg', './3.jpeg', './4.jpeg']\n\nconst Frame = styled(animated.div)({\n  display: 'flex',\n  height: '100vh',\n  width: '100vw',\n  justifyContent: 'center',\n  alignItems: 'center',\n  position: 'absolute',\n  willChange: 'transform',\n  cursor: 'grab',\n  '&:active': {\n    cursor: 'grabbing'\n  },\n  perspectiveOrigin: '50% 50%',\n  perspective: '400px'\n})\n\nconst WIDTH = 200\n\nconst Cover = styled(animated.div)({\n  width: WIDTH,\n  height: WIDTH,\n  borderRadius: '8px',\n  backgroundSize: 'cover',\n  backgroundRepeat: 'no-repeat',\n  backgroundPosition: 'center center',\n  willChange: 'transform',\n  boxShadow: '0 62.5px 125px -25px rgba(50, 50, 73, 0.5), 0 37.5px 75px -37.5px rgba(0, 0, 0, 0.6)',\n  position: 'absolute'\n})\n\nconst getX = index => (index === 0 ? 0 : (index * WIDTH) / 20 + 50 * Math.sign(index))\nconst getScale = index => (index === 0 ? 1.3 : 1 - Math.abs(index) / 25)\nconst getZIndex = index => -index + images.length\nconst getYRotation = index => (index === 0 ? 0 : -35 * Math.sign(index))\n\nfunction setter({ xDelta, down, index } = {}) {\n  return i => {\n    const offsetIndex = i - index.current\n    return {\n      display: 'flex',\n      x: getX(offsetIndex) + (down ? xDelta / 10 : 0),\n      sc: getScale(Math.abs(offsetIndex)),\n      zIndex: getZIndex(Math.abs(offsetIndex)),\n      yRotation: getYRotation(offsetIndex),\n      opacity: offsetIndex === 0 ? 1 : 0.9,\n      immediate: key => key === 'zIndex',\n      config: { mass: 1, tension: 210, friction: 20 }\n    }\n  }\n}\n\nexport default function Passion() {\n\n  const index = useRef(0)\n  const [props, set] = useSprings(images.length, setter({ index }))\n  const bind = useGesture(({ down, delta: [xDelta], direction: [xDir], distance, cancel }) => {\n    if (down && distance > WIDTH / 10) {\n      cancel((index.current = clamp(index.current + (xDir > 0 ? -1 : 1), 0, images.length - 1)))\n    }\n    set(setter({ xDelta, down, index }))\n  })\n  return (\n    <Frame {...bind()}>\n      {props.map(({ x, display, sc, zIndex, yRotation, opacity }, i) => (\n        <Cover\n          key={i}\n          style={{\n            display,\n            transform: interpolate(\n              [x, sc, yRotation],\n              (x, sc, yr) => `translate3d(${x}%,0,0) scale(${sc}) rotateY(${yr}deg)`\n            ),\n            backgroundImage: `url(${images[i]})`,\n            zIndex,\n            opacity\n          }}\n        />\n      ))}\n    </Frame>\n  )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}